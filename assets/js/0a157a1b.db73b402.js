"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[711],{28404:e=>{e.exports=JSON.parse('{"functions":[{"name":"set","desc":"Returns a clone of `tbl`, having removed all duplicate values. Pulled this one straight from python.","params":[{"name":"tbl","desc":"The table to remove all duplicate values in","lua_type":"{}"}],"returns":[{"desc":"","lua_type":"{}"}],"function_type":"static","source":{"line":25,"path":"packages/table/init.luau"}},{"name":"any","desc":"Checks `tbl` and returns true if any of the values in the table are true.","params":[{"name":"tbl","desc":"The table to check","lua_type":"{}"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":48,"path":"packages/table/init.luau"}},{"name":"all","desc":"Checks `tbl` and returns true if all of the values in the table are true. Ignores non-boolean values. Also returns false if there are no boolean values.","params":[{"name":"tbl","desc":"The table to check","lua_type":"{}"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":72,"path":"packages/table/init.luau"}},{"name":"getValuesOfType","desc":"Looks through ``tbl`` and returns all a table containing the values which are the type specified by ``Type``. Returns nil if none match ``Type``.","params":[{"name":"tbl","desc":"The table to look through","lua_type":"{}"},{"name":"Type","desc":"The type to check for","lua_type":"string"}],"returns":[{"desc":"","lua_type":"{} | nil"}],"function_type":"static","source":{"line":110,"path":"packages/table/init.luau"}},{"name":"Copy","desc":"Creates a copy of the given table. By default, a shallow copy is\\nperformed. For deep copies, a second boolean argument must be\\npassed to the function.\\n\\n:::caution No cyclical references\\nDeep copies are _not_ protected against cyclical references. Passing\\na table with cyclical references _and_ the `deep` parameter set to\\n`true` will result in a stack-overflow.","params":[{"name":"tbl","desc":"Table to copy","lua_type":"table"},{"name":"deep","desc":"Whether or not to perform a deep copy","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":144,"path":"packages/table/init.luau"}},{"name":"Sync","desc":"Synchronizes the `srcTbl` based on the `templateTbl`. This will make\\nsure that `srcTbl` has all of the same keys as `templateTbl`, including\\nremoving keys in `srcTbl` that are not present in `templateTbl`. This\\nis a _deep_ operation, so any nested tables will be synchronized as\\nwell.\\n\\n```lua\\nlocal template = {kills = 0, deaths = 0, xp = 0}\\nlocal data = {kills = 10, experience = 12}\\ndata = Table.Sync(data, template)\\nprint(data) --\x3e {kills = 10, deaths = 0, xp = 0}\\n```\\n\\n:::caution Data Loss Warning\\nThis is a two-way sync, so the source table will have data\\n_removed_ that isn\'t found in the template table. This can\\nbe problematic if used for player data, where there might\\nbe dynamic data added that isn\'t in the template.\\n\\nFor player data, use `Table.Reconcile` instead.","params":[{"name":"srcTbl","desc":"Source table","lua_type":"table"},{"name":"templateTbl","desc":"Template table","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":188,"path":"packages/table/init.luau"}},{"name":"Reconcile","desc":"Performs a one-way sync on the `source` table against the\\n`template` table. Any keys found in `template` that are\\nnot found in `source` will be added to `source`. This is\\nuseful for syncing player data against data template tables\\nto ensure players have all the necessary keys, while\\nmaintaining existing keys that may no longer be in the\\ntemplate.\\n\\nThis is a deep operation, so nested tables will also be\\nproperly reconciled.\\n\\n```lua\\nlocal template = {kills = 0, deaths = 0, xp = 0}\\nlocal data = {kills = 10, abc = 20}\\nlocal correctedData = Table.Reconcile(data, template)\\n\\nprint(correctedData) --\x3e {kills = 10, deaths = 0, xp = 0, abc = 20}\\n```","params":[{"name":"source","desc":"","lua_type":"table"},{"name":"template","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":260,"path":"packages/table/init.luau"}},{"name":"SwapRemove","desc":"Removes index `i` in the table by swapping the value at `i` with\\nthe last value in the array, and then trimming off the last\\nvalue from the array.\\n\\nThis allows removal of the value at `i` in `O(1)` time, but does\\nnot preserve array ordering. If a value needs to be removed from\\nan array, but ordering of the array does not matter, using\\n`SwapRemove` is always preferred over `table.remove`.\\n\\nIn the following example, we remove \\"B\\" at index 2. SwapRemove does\\nthis by moving the last value \\"E\\" over top of \\"B\\", and then trimming\\noff \\"E\\" at the end of the array:\\n```lua\\nlocal t = {\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"}\\nTable.SwapRemove(t, 2) -- Remove \\"B\\"\\nprint(t) --\x3e {\\"A\\", \\"E\\", \\"C\\", \\"D\\"}\\n```\\n\\n:::note Arrays only\\nThis function works on arrays, but not dictionaries.","params":[{"name":"tbl","desc":"Array","lua_type":"table"},{"name":"i","desc":"Index","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":313,"path":"packages/table/init.luau"}},{"name":"SwapRemoveFirstValue","desc":"Performs `table.find(tbl, v)` to find the index of the given\\nvalue, and then performs `Table.SwapRemove` on that index.\\n\\n```lua\\nlocal t = {\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"}\\nTable.SwapRemoveFirstValue(t, \\"C\\")\\nprint(t) --\x3e {\\"A\\", \\"B\\", \\"E\\", \\"D\\"}\\n```\\n\\n:::note Arrays only\\nThis function works on arrays, but not dictionaries.","params":[{"name":"tbl","desc":"Array","lua_type":"table"},{"name":"v","desc":"Value to find","lua_type":"any"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"static","source":{"line":338,"path":"packages/table/init.luau"}},{"name":"Map","desc":"Performs a map operation against the given table, which can be used to\\nmap new values based on the old values at given keys/indices.\\n\\nFor example:\\n\\n```lua\\nlocal t = {A = 10, B = 20, C = 30}\\nlocal t2 = Table.Map(t, function(value)\\n\\treturn value * 2\\nend)\\nprint(t2) --\x3e {A = 20, B = 40, C = 60}\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"predicate","desc":"","lua_type":"(value: any, key: any, tbl: table) -> newValue: any"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":366,"path":"packages/table/init.luau"}},{"name":"Filter","desc":"Performs a filter operation against the given table, which can be used to\\nfilter out unwanted values from the table.\\n\\nFor example:\\n\\n```lua\\nlocal t = {A = 10, B = 20, C = 30}\\nlocal t2 = Table.Filter(t, function(value, key)\\n\\treturn value > 15\\nend)\\nprint(t2) --\x3e {B = 40, C = 60}\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"predicate","desc":"","lua_type":"(value: any, key: any, tbl: table) -> keep: boolean"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":396,"path":"packages/table/init.luau"}},{"name":"Reduce","desc":"Performs a reduce operation against the given table, which can be used to\\nreduce the table into a single value. This could be used to sum up a table\\nor transform all the values into a compound value of any kind.\\n\\nFor example:\\n\\n```lua\\nlocal t = {10, 20, 30, 40}\\nlocal result = Table.Reduce(t, function(accum, value)\\n\\treturn accum + value\\nend)\\nprint(result) --\x3e 100\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"predicate","desc":"","lua_type":"(accumulator: any, value: any, index: any, tbl: table) -> result: any"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":439,"path":"packages/table/init.luau"}},{"name":"Assign","desc":"Copies all values of the given tables into the `target` table.\\n\\n```lua\\nlocal t = {A = 10}\\nlocal t2 = {B = 20}\\nlocal t3 = {C = 30, D = 40}\\nlocal newT = Table.Assign(t, t2, t3)\\nprint(newT) --\x3e {A = 10, B = 20, C = 30, D = 40}\\n```","params":[{"name":"target","desc":"","lua_type":"table"},{"name":"...","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":482,"path":"packages/table/init.luau"}},{"name":"Extend","desc":"Extends the target array with the extension array.\\n\\n```lua\\nlocal t = {10, 20, 30}\\nlocal t2 = {30, 40, 50}\\nlocal tNew = Table.Extend(t, t2)\\nprint(tNew) --\x3e {10, 20, 30, 30, 40, 50}\\n```\\n\\n:::note Arrays only\\nThis function works on arrays, but not dictionaries.","params":[{"name":"target","desc":"","lua_type":"table"},{"name":"extension","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":511,"path":"packages/table/init.luau"}},{"name":"Reverse","desc":"Reverses the array.\\n\\n```lua\\nlocal t = {1, 5, 10}\\nlocal tReverse = Table.Reverse(t)\\nprint(tReverse) --\x3e {10, 5, 1}\\n```\\n\\n:::note Arrays only\\nThis function works on arrays, but not dictionaries.","params":[{"name":"tbl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":536,"path":"packages/table/init.luau"}},{"name":"Shuffle","desc":"Shuffles the table.\\n\\n```lua\\nlocal t = {1, 2, 3, 4, 5, 6, 7, 8, 9}\\nlocal shuffled = Table.Shuffle(t)\\nprint(shuffled) --\x3e e.g. {9, 4, 6, 7, 3, 1, 5, 8, 2}\\n```\\n\\n:::note Arrays only\\nThis function works on arrays, but not dictionaries.","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"rngOverride","desc":"","lua_type":"Random?"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":563,"path":"packages/table/init.luau"}},{"name":"Sample","desc":"Returns a random sample of the table.\\n\\n```lua\\nlocal t = {1, 2, 3, 4, 5, 6, 7, 8, 9}\\nlocal sample = Table.Sample(t, 3)\\nprint(sample) --\x3e e.g. {6, 2, 5}\\n```\\n\\n:::note Arrays only\\nThis function works on arrays, but not dictionaries.","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"sampleSize","desc":"","lua_type":"number"},{"name":"rngOverride","desc":"","lua_type":"Random?"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":593,"path":"packages/table/init.luau"}},{"name":"Flat","desc":"Returns a new table where all sub-arrays have been\\nbubbled up to the top. The depth at which the scan\\nis performed is dictated by the `depth` parameter,\\nwhich is set to `1` by default.\\n\\n```lua\\nlocal t = {{10, 20}, {90, 100}, {30, 15}}\\nlocal flat = Table.Flat(t)\\nprint(flat) --\x3e {10, 20, 90, 100, 30, 15}\\n```\\n\\n:::note Arrays only\\nThis function works on arrays, but not dictionaries.","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":641,"path":"packages/table/init.luau"}},{"name":"FlatMap","desc":"Calls `Table.Map` on the given table and predicate, and then\\ncalls `Table.Flat` on the result from the map operation.\\n\\n```lua\\nlocal t = {10, 20, 30}\\nlocal result = Table.FlatMap(t, function(value)\\n\\treturn {value, value * 2}\\nend)\\nprint(result) --\x3e {10, 20, 20, 40, 30, 60}\\n```\\n\\n:::note Arrays only\\nThis function works on arrays, but not dictionaries.","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"predicate","desc":"","lua_type":"(key: any, value: any, tbl: table) -> newValue: any"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":678,"path":"packages/table/init.luau"}},{"name":"Keys","desc":"Returns an array with all the keys in the table.\\n\\n```lua\\nlocal t = {A = 10, B = 20, C = 30}\\nlocal keys = Table.Keys(t)\\nprint(keys) --\x3e {\\"A\\", \\"B\\", \\"C\\"}\\n```\\n\\n:::caution Ordering\\nThe ordering of the keys is never guaranteed. If order is imperative, call\\n`table.sort` on the resulting `keys` array.\\n```lua\\nlocal keys = Table.Keys(t)\\ntable.sort(keys)\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":704,"path":"packages/table/init.luau"}},{"name":"Values","desc":"Returns an array with all the values in the table.\\n\\n```lua\\nlocal t = {A = 10, B = 20, C = 30}\\nlocal values = Table.Values(t)\\nprint(values) --\x3e {10, 20, 30}\\n```\\n\\n:::caution Ordering\\nThe ordering of the values is never guaranteed. If order is imperative, call\\n`table.sort` on the resulting `values` array.\\n```lua\\nlocal values = Table.Values(t)\\ntable.sort(values)\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":734,"path":"packages/table/init.luau"}},{"name":"Find","desc":"Performs a linear scan across the table and calls `callback` on\\neach item in the array. Returns the value and key of the first\\npair in which the callback returns `true`.\\n\\n```lua\\nlocal t = {\\n\\t{Name = \\"Bob\\", Age = 20};\\n\\t{Name = \\"Jill\\", Age = 30};\\n\\t{Name = \\"Ann\\", Age = 25};\\n}\\n\\n-- Find first person who has a name starting with J:\\nlocal firstPersonWithJ = Table.Find(t, function(person)\\n\\treturn person.Name:sub(1, 1):lower() == \\"j\\"\\nend)\\n\\nprint(firstPersonWithJ) --\x3e {Name = \\"Jill\\", Age = 30}\\n```\\n\\n:::caution Dictionary Ordering\\nWhile `Find` can also be used with dictionaries, dictionary ordering is never\\nguaranteed, and thus the result could be different if there are more\\nthan one possible matches given the data and callback function.","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"callback","desc":"","lua_type":"(value: any, index: any, tbl: table) -> boolean"}],"returns":[{"desc":"","lua_type":"(value: any?, key: any?)"}],"function_type":"static","source":{"line":773,"path":"packages/table/init.luau"}},{"name":"Every","desc":"Returns `true` if the `callback` also returns `true` for _every_\\nitem in the table.\\n\\n```lua\\nlocal t = {10, 20, 40, 50, 60}\\n\\nlocal allAboveZero = Table.Every(t, function(value)\\n\\treturn value > 0\\nend)\\n\\nprint(\\"All above zero:\\", allAboveZero) --\x3e All above zero: true\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"callback","desc":"","lua_type":"(value: any, index: any, tbl: table) -> boolean"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":802,"path":"packages/table/init.luau"}},{"name":"Some","desc":"Returns `true` if the `callback` also returns `true` for _at least\\none_ of the items in the table.\\n\\n```lua\\nlocal t = {10, 20, 40, 50, 60}\\n\\nlocal someBelowTwenty = Table.Some(t, function(value)\\n\\treturn value < 20\\nend)\\n\\nprint(\\"Some below twenty:\\", someBelowTwenty) --\x3e Some below twenty: true\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"callback","desc":"","lua_type":"(value: any, index: any, tbl: table) -> boolean"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":831,"path":"packages/table/init.luau"}},{"name":"Truncate","desc":"Returns a new table truncated to the length of `length`. Any length\\nequal or greater than the current length will simply return a\\nshallow copy of the table.\\n\\n```lua\\nlocal t = {10, 20, 30, 40, 50, 60, 70, 80}\\nlocal tTruncated = Table.Truncate(t, 3)\\nprint(tTruncated) --\x3e {10, 20, 30}\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"},{"name":"length","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":857,"path":"packages/table/init.luau"}},{"name":"Zip","desc":"Returns an iterator that can scan through multiple tables at the same time side-by-side, matching\\nagainst shared keys/indices.\\n\\n```lua\\nlocal t1 = {10, 20, 30, 40, 50}\\nlocal t2 = {60, 70, 80, 90, 100}\\n\\nfor key,values in Table.Zip(t1, t2) do\\n\\tprint(key, values)\\nend\\n\\n--[[\\n\\tOutputs:\\n\\t1 {10, 60}\\n\\t2 {20, 70}\\n\\t3 {30, 80}\\n\\t4 {40, 90}\\n\\t5 {50, 100}\\n--]]\\n```","params":[{"name":"...","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"(iter: (t: table, k: any) -> (key: any?, values: table?), tbl: table, startIndex: any?)"}],"function_type":"static","source":{"line":890,"path":"packages/table/init.luau"}},{"name":"Lock","desc":"Locks the table using `table.freeze`, as well as any\\nnested tables within the given table. This will lock\\nthe whole deep structure of the table, disallowing any\\nfurther modifications.\\n\\n```lua\\nlocal tbl = {xyz = {abc = 32}}\\ntbl.xyz.abc = 28 -- Works fine\\nTable.Lock(tbl)\\ntbl.xyz.abc = 64 -- Will throw an error (cannot modify readonly table)\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":943,"path":"packages/table/init.luau"}},{"name":"IsEmpty","desc":"Returns `true` if the given table is empty. This is\\nsimply performed by checking if `next(tbl)` is `nil`\\nand works for both arrays and dictionaries. This is\\nuseful when needing to check if a table is empty but\\nnot knowing if it is an array or dictionary.\\n\\n```lua\\nTable.IsEmpty({}) -- true\\nTable.IsEmpty({\\"abc\\"}) -- false\\nTable.IsEmpty({abc = 32}) -- false\\n```","params":[{"name":"tbl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":973,"path":"packages/table/init.luau"}},{"name":"EncodeJSON","desc":"Proxy for [`HttpService:JSONEncode`](https://developer.roblox.com/en-us/api-reference/function/HttpService/JSONEncode).","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":985,"path":"packages/table/init.luau"}},{"name":"DecodeJSON","desc":"Proxy for [`HttpService:JSONDecode`](https://developer.roblox.com/en-us/api-reference/function/HttpService/JSONDecode).","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":997,"path":"packages/table/init.luau"}}],"properties":[],"types":[],"name":"Table","desc":"A collection of table utilities. Forked from [sleitnick\'s tableutil](https://sleitnick.github.io/RbxUtil/api/TableUtil/)","source":{"line":11,"path":"packages/table/init.luau"}}')}}]);